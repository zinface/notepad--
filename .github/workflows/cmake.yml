name: CMake

on:
  push:
    branches: [ "cmake-dev" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: atom63/qt-docker:linux-buster-x86_64-qt5
      options: --user root
    steps:
    - uses: actions/checkout@v3
    
    # install dependencies
    - run: sudo apt-get update -y
    - run: sudo apt-get install -y base-files
    - run: sudo apt-get install -y build-essential g++ make cmake 
    - run: sudo apt-get install -y build-essential tree lsb-release
    - run: sudo apt-get install -y qtbase5-dev qtbase5-dev-tools libqt5printsupport5 libqt5xmlpatterns5-dev
    
    #- name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      run: make -f linux-appimage.mk package

    - name: Create Release
      uses: ncipollo/release-action@v1.12.0
      with:
        name: temporary-release
        artifacts: "build/linux-appimage/*.AppImage"
        tag: temporary-release
        body: |
          这是一个自动运行的构建 - release
        draft: true
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

    # - name: Test
      # working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: ctest -C ${{env.BUILD_TYPE}}

